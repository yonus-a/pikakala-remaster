generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model brand {
  id         Int       @id @default(autoincrement())
  name       String?
  createdAt  DateTime  @default(now()) @db.DateTime(0)
  updatedAt  DateTime? @db.DateTime(0)
  insertedId String
  updatedId  String?
  deleted    Int       @default(0)
  product    product[]
}

model category {
  id         Int       @id @default(autoincrement())
  name       String?   @db.TinyText
  createdAt  DateTime  @default(now()) @db.DateTime(0)
  updatedAt  DateTime? @db.DateTime(0)
  insertedId String
  updatedId  String?
  deleted    Int       @default(0)
  product    product[]
}

model otp {
  id     String @id
  otp    String
  expiry BigInt
  user   user   @relation(fields: [id], references: [id], onUpdate: Restrict, map: "FK_OTP_USER")
}

model product {
  id             Int              @id @default(autoincrement())
  name           String?          @db.TinyText
  image          String
  createdAt      DateTime         @default(now()) @db.DateTime(0)
  updatedAt      DateTime?        @db.DateTime(0)
  insertedId     String
  updatedId      String?
  deleted        Int              @default(0)
  categoryId     Int?
  brandId        Int?
  description    String?          @db.Text
  brand          brand?           @relation(fields: [brandId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_product_brand")
  category       category?        @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_product_category")
  product_color  product_color[]
  product_detail product_detail[]
  product_image  product_image[]

  @@index([brandId], map: "brandId")
  @@index([categoryId], map: "categoryId")
}

model product_color {
  id         Int      @id @default(autoincrement())
  productId  Int?
  colorId    Int
  createdAt  DateTime @default(now()) @db.DateTime(0)
  insertedId String
  deleted    Int      @default(0)
  color      color    @relation(fields: [colorId], references: [id], onUpdate: Restrict, map: "FK_productColor_color")
  product    product? @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_productColor_product")

  @@index([colorId], map: "FK_productColor_color")
  @@index([productId], map: "FK_productColor_product")
}

model product_detail {
  id         Int       @id @default(autoincrement())
  productId  Int?
  term       String?   @db.TinyText
  definition String?   @db.TinyText
  createdAt  DateTime  @default(now()) @db.DateTime(0)
  updatedAt  DateTime? @db.DateTime(0)
  insertedId String
  updatedId  String?
  deleted    Int       @default(0)
  product    product?  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_productDetail_product")

  @@index([productId], map: "productId")
}

model product_image {
  id         Int       @id @default(autoincrement())
  productId  Int?
  image      String?   @db.TinyText
  createdAt  DateTime  @default(now()) @db.DateTime(0)
  updatedAt  DateTime? @db.DateTime(0)
  insertedId String
  updatedId  String?
  deleted    Int       @default(0)
  product    product?  @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_productImage_product")

  @@index([productId], map: "productId")
}

model slide {
  id         Int       @id @default(autoincrement())
  image      String
  alt        String
  createdAt  DateTime  @db.DateTime(0)
  updatedAt  DateTime? @db.DateTime(0)
  insertedId String
  updatedId  String?
  deleted    Int       @default(0)
}

model user {
  id        String    @id
  firstname String?
  lastname  String?
  fullName  String?
  email     String?
  birthday  DateTime? @db.DateTime(0)
  address   String?
  idcard    String?
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedId String?
  updatedAt DateTime? @db.DateTime(0)
  deleted   Int       @default(0)
  otp       otp?
}

model color {
  id            Int             @id @default(autoincrement())
  name          String
  code          String
  createdAt     DateTime        @default(now()) @db.DateTime(0)
  updatedAt     DateTime?       @db.DateTime(0)
  insertedId    String
  updatedId     String?
  deleted       Int             @default(0)
  product_color product_color[]
}
